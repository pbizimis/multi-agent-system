{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers, threshold):\n    if len(numbers) < 2:\n        return False\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i+1] - numbers[i]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str):\n    s = paren_string.replace(' ', '')\n    groups = []\n    group = ''\n    count = 0\n    for c in s:\n        group += c\n        if c == '(':\n            count += 1\n        elif c == ')':\n            count -= 1\n        if count == 0 and group:\n            groups.append(group)\n            group = ''\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> list:\n    result = []\n    groups = paren_string.split()\n    for group in groups:\n        current = 0\n        maximum = 0\n        for char in group:\n            if char == '(':\n                current += 1\n                if current > maximum:\n                    maximum = current\n            elif char == ')':\n                current -= 1\n        result.append(maximum)\n    return result"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers):\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers):\n    if not numbers:\n        return []\n    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError('Input strings must be of equal length')\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings):\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str):\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token == 'o':\n            result.append(4)\n        elif token == 'o|':\n            result.append(2)\n        elif token == '.|':\n            result.append(1)\n        else:\n            raise ValueError('Invalid musical note encountered: ' + token)\n    return result"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    if not substring:\n        return 0\n    count = 0\n    pos = 0\n    while pos <= len(string) - len(substring):\n        if string[pos:pos+len(substring)] == substring:\n            count += 1\n        pos += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    if not numbers:\n        return \"\"\n    items = numbers.split()\n    sorted_items = sorted(items, key=lambda x: words.index(x))\n    return \" \".join(sorted_items)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    nums = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (nums[i-1], nums[i])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    mn = min(numbers)\n    mx = max(numbers)\n    if mn == mx:\n        return [0.0 for _ in numbers]\n    return [(x - mn) / (mx - mn) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if type(x) is int]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n <= 1:\n        return 0\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 0"}
{"task_id": "HumanEval/25", "completion": "def factorize(n):\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 2\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    freq = {}\n    for num in numbers:\n        freq[num] = freq.get(num, 0) + 1\n    result = []\n    for num in numbers:\n        if freq[num] == 1:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings):\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs, x):\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs):\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError\n    f = lambda x: poly(xs, x)\n    tol = 1e-7\n    a = 1\n    while f(-a) * f(a) > 0:\n        a *= 2\n    left, right = -a, a\n    while right - left > tol:\n        mid = (left + right) / 2\n        val = f(mid)\n        if abs(val) < tol:\n            return mid\n        if f(left) * val < 0:\n            right = mid\n        else:\n            left = mid\n    return (left + right) / 2"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    res = l.copy()\n    third_values = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third_values.sort()\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            res[i] = third_values[j]\n            j += 1\n    return res"}
{"task_id": "HumanEval/34", "completion": "def unique(l):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l):\n    if not l:\n        raise ValueError('max_element() arg is an empty list')\n    max_val = l[0]\n    for x in l:\n        if x > max_val:\n            max_val = x\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    total = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            total += str(i).count('7')\n    return total"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    even_indices = list(range(0, len(l), 2))\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    res = l.copy()\n    for idx, i in enumerate(even_indices):\n        res[i] = even_values[idx]\n    return res"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "import math\n\ndef prime_fib(n):\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        limit = math.isqrt(num)\n        i = 3\n        while i <= limit:\n            if num % i == 0:\n                return False\n            i += 2\n        return True\n    count = 0\n    a, b = 1, 2\n    while True:\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    if not (isinstance(a, (int, float)) and isinstance(h, (int, float))):\n        raise TypeError('Both a and h must be numbers.')\n    if a < 0 or h < 0:\n        raise ValueError('Both a and h must be non-negative.')\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    if not l:\n        raise ValueError('List is empty')\n    s = sorted(l)\n    n = len(s)\n    if n % 2 == 1:\n        return s[(n + 1) // 2 - 1]\n    else:\n        if n == 2:\n            return (s[0] + s[1]) / 2\n        return (s[n // 2] + s[n // 2 + 1]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = set('aeiouAEIOU')\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x, y):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n):\n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    count = 0\n    for ch in brackets:\n        if ch == '<':\n            count += 1\n        elif ch == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    \"\"\"\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    inc = True\n    dec = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    largest = 1\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest = factor\n            n //= factor\n        factor += 2\n    if n > 1:\n        largest = n\n    return largest"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    if n < 1:\n        return 0\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    balance = 0\n    for b in brackets:\n        if b == '(':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n < 0:\n        raise ValueError('n must be a non-negative integer')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    if not s:\n        return 0\n    lower_s = s.lower()\n    count = 0\n    for ch in lower_s:\n        if ch in 'aeiou':\n            count += 1\n    if lower_s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    return s[-shift:] + s[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    nums = re.findall(r'\\d+', s)\n    if len(nums) < 2:\n        return n\n    apples, oranges = int(nums[0]), int(nums[1])\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_val = None\n    min_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if min_val is None or num < min_val:\n                min_val = num\n                min_index = i\n    return [min_val, min_index] if min_val is not None else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    candidate = -1\n    for num in freq:\n        if freq[num] >= num and num > candidate:\n            candidate = num\n    return candidate"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    res = []\n    left, right = 0, len(sorted_lst) - 1\n    while left <= right:\n        res.append(sorted_lst[left])\n        left += 1\n        if left <= right:\n            res.append(sorted_lst[right])\n            right -= 1\n    return res"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    if sum1 <= sum2:\n        return lst1\n    return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    if a < 8:\n        return False\n    primes = [i for i in range(2, a) if is_prime(i)]\n    ln = len(primes)\n    for i in range(ln):\n        for j in range(i, ln):\n            for k in range(j, ln):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = n\n    while power < x:\n        power *= n\n    return power == x"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    if a >= 0:\n        cube_root = round(a ** (1.0/3))\n    else:\n        cube_root = -round((abs(a)) ** (1.0/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for ch in num:\n        if ch in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    result = []\n    for g in grades:\n        if g == 4.0:\n            letter = 'A+'\n        elif g > 3.7:\n            letter = 'A'\n        elif g > 3.3:\n            letter = 'A-'\n        elif g > 3.0:\n            letter = 'B+'\n        elif g > 2.7:\n            letter = 'B'\n        elif g > 2.3:\n            letter = 'B-'\n        elif g > 2.0:\n            letter = 'C+'\n        elif g > 1.7:\n            letter = 'C'\n        elif g > 1.3:\n            letter = 'C-'\n        elif g > 1.0:\n            letter = 'D+'\n        elif g > 0.7:\n            letter = 'D'\n        elif g > 0.0:\n            letter = 'D-'\n        elif g == 0.0:\n            letter = 'E'\n        result.append(letter)\n    return result"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 18 * (10 ** (n - 2))"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    s = sum(int(d) for d in str(N))\n    return bin(s)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "import re\n\ndef anti_shuffle(s):\n    tokens = re.split('(\\s+)', s)\n    res = []\n    for token in tokens:\n        if token and token.isspace():\n            res.append(token)\n        else:\n            res.append(''.join(sorted(token)))\n    return ''.join(res)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    res = []\n    for i, row in enumerate(lst):\n        indices = [j for j, val in enumerate(row) if val == x]\n        indices.sort(reverse=True)\n        for j in indices:\n            res.append((i, j))\n    return res"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    s = array[0] + array[-1]\n    if s % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') + 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') + 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    unique = sorted(set(lst))\n    return unique[1] if len(unique) >= 2 else None"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        stripped = sentence.strip()\n        if stripped and stripped.split()[0] == 'I':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels_upper = \"AEIOU\"\n    vowels_lower = \"aeiou\"\n    alpha_upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alpha_lower = \"abcdefghijklmnopqrstuvwxyz\"\n    result = []\n    for ch in message:\n        sw = ch.swapcase()\n        if sw in vowels_upper:\n            idx = alpha_upper.index(sw)\n            new_idx = (idx + 2) % 26\n            result.append(alpha_upper[new_idx])\n        elif sw in vowels_lower:\n            idx = alpha_lower.index(sw)\n            new_idx = (idx + 2) % 26\n            result.append(alpha_lower[new_idx])\n        else:\n            result.append(sw)\n    return ''.join(result)"}
{"task_id": "HumanEval/94", "completion": "import math\n\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n % 2 == 0:\n            return n == 2\n        r = int(math.sqrt(n))\n        for i in range(3, r + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    if max_prime == -1:\n        return 0\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n    all_lower = all(key == key.lower() for key in keys)\n    all_upper = all(key == key.upper() for key in keys)\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        i = 3\n        while i * i <= x:\n            if x % i == 0:\n                return False\n            i += 2\n        return True\n    result = []\n    for num in range(2, n):\n        if is_prime(num):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    lower_diff = abs(num - floor_val)\n    higher_diff = abs(ceil_val - num)\n    if lower_diff < higher_diff:\n        return floor_val\n    elif lower_diff > higher_diff:\n        return ceil_val\n    else:\n        if num >= 0:\n            return ceil_val\n        else:\n            return floor_val"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    return [n + 2 * i for i in range(n)]"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    if not s.strip():\n        return []\n    return re.split(r'[,\\s]+', s.strip())"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    candidate = y if y % 2 == 0 else y - 1\n    return candidate if candidate >= x else -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    count = m - n + 1\n    total = (n + m) * count / 2\n    avg = total / count\n    rounded = round(avg)\n    return bin(rounded)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all((int(digit) % 2 != 0) for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered = [num for num in arr if num in names]\n    filtered.sort()\n    filtered.reverse()\n    return [names[num] for num in filtered]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(i * (i + 1) // 2)\n    return res"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            s = sum(int(d) for d in str(num))\n        else:\n            snum = str(num)[1:]\n            s = -int(str(num)[0]) + sum(int(d) for d in snum) if snum else -int(str(num)[0])\n        if s > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n        if count > 1:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test.strip():\n        return {}\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values())\n    result = {}\n    for letter, count in counts.items():\n        if count == max_count:\n            result[letter] = count\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for ch in s if int(ch) % 2 == 1)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    current_min = nums[0]\n    global_min = nums[0]\n    for num in nums[1:]:\n        current_min = num if num < current_min + num else current_min + num\n        global_min = current_min if current_min < global_min else global_min\n    return global_min"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    total = 0\n    for well in grid:\n        water = sum(well)\n        if water > 0:\n            total += math.ceil(water / capacity)\n    return total"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    if all(x >= 0 for x in arr):\n        return sorted(arr, key=lambda x: (len(bin(x)[2:]), x))\n    return sorted(arr)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if s == \"\":\n        return []\n    vowels = set('aeiouAEIOU')\n    result = []\n    words = s.split()\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.isalpha() and letter not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    n = len(word)\n    if n < 3:\n        return \"\"\n    for i in range(n - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst[0], lst[1]\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k == 0:\n        return []\n    s = sorted(arr)\n    return s[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if abs(x) < 100)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = []\n    current = n\n    while True:\n        if current % 2 == 1:\n            odd_numbers.append(current)\n        if current == 1:\n            break\n        if current % 2 == 0:\n            current //= 2\n        else:\n            current = 3 * current + 1\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    mm, dd, yyyy = parts\n    if not (mm.isdigit() and dd.isdigit() and yyyy.isdigit()):\n        return False\n    if len(mm) != 2 or len(dd) < 1 or len(yyyy) != 4:\n        return False\n    try:\n        month = int(mm)\n        day = int(dd)\n        year = int(yyyy)\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if any(c.isspace() for c in txt):\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if 'a' <= char <= 'z':\n                if (ord(char) - ord('a')) % 2 == 1:\n                    count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n        if counts[num] > 2:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    import math\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if end <= start:\n        return \"NO\"\n    l = end - start\n    if l < 2:\n        return \"NO\"\n    for i in range(2, int(math.sqrt(l)) + 1):\n        if l % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    total = 0\n    prod = 1\n    for num in arr:\n        total += abs(num)\n        if num == 0:\n            prod *= 0\n        elif num > 0:\n            prod *= 1\n        else:\n            prod *= -1\n    return total * prod"}
{"task_id": "HumanEval/129", "completion": "from functools import lru_cache\n\ndef minPath(grid, k):\n    n = len(grid)\n    # locate cell with value 1\n    start = None\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                start = (i, j)\n                break\n        if start is not None:\n            break\n\n    dirs = [(0,1),(0,-1),(1,0),(-1,0)]\n\n    @lru_cache(maxsize=None)\n    def dfs(r, c, rem):\n        if rem == 1:\n            return (grid[r][c],)\n        best = None\n        for dr, dc in dirs:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n:\n                candidate = (grid[r][c],) + dfs(nr, nc, rem - 1)\n                if best is None or candidate < best:\n                    best = candidate\n        return best\n    \n    return list(dfs(start[0], start[1], k))"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    seq = []\n    for i in range(n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            if i == 1:\n                seq.append(3)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + (1 + (i + 1) // 2))\n    return seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    prod = 1\n    found = False\n    for ch in str(n):\n        d = int(ch)\n        if d % 2 == 1:\n            prod *= d\n            found = True\n    return prod if found else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    n = len(string)\n    if n < 4:\n        return False\n    right_count = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        right_count[i] = right_count[i + 1] + (1 if string[i] == ']' else 0)\n    left_count = 0\n    for i, ch in enumerate(string):\n        if ch == '[':\n            if left_count > 0 and right_count[i + 1] >= 2:\n                return True\n            left_count += 1\n    return False"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    trimmed = txt.rstrip()\n    if not trimmed:\n        return False\n    last_char = trimmed[-1]\n    if not last_char.isalpha():\n        return False\n    if len(trimmed) == 1 or trimmed[-2] == ' ':\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    if n < 2:\n        return -1\n    for i in range(n - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    largest_neg = max(neg) if neg else None\n    smallest_pos = min(pos) if pos else None\n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def parse(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n    val_a = parse(a)\n    val_b = parse(b)\n    if abs(val_a - val_b) < 1e-12:\n        return None\n    return a if val_a > val_b else b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 8 or n % 2 != 0:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "from math import factorial\n\ndef special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    return re.sub(r' +', lambda m: '-' if len(m.group()) > 2 else '_', text)"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    digit_count = sum(ch.isdigit() for ch in file_name)\n    if digit_count > 3:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i, val in enumerate(lst):\n        if i % 3 == 0:\n            total += val * val\n        elif i % 4 == 0:\n            total += val * val * val\n        else:\n            total += val\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * c) % (b * d) == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(x):\n        return sum(int(d) for d in str(abs(x)))\n    return sorted(nums, key=lambda x: digit_sum(x) if x < 0 else digit_sum(x) + 1.5)"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            s = str(num)\n            if int(s[0]) % 2 == 1 and int(s[-1]) % 2 == 1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "from math import comb\n\ndef get_max_triples(n):\n    m = n // 3\n    r = n % 3\n    count1 = 2 * m + (1 if r >= 1 else 0)\n    count0 = m + (1 if r >= 2 else 0)\n    res = (comb(count1, 3) if count1 >= 3 else 0) + (comb(count0, 3) if count0 >= 3 else 0)\n    return res"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    i1 = planets.index(planet1)\n    i2 = planets.index(planet2)\n    if i1 < i2:\n        return tuple(planets[i1+1:i2])\n    else:\n        return tuple(planets[i2+1:i1])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda s: (len(s), s))"}
{"task_id": "HumanEval/150", "completion": "import math\n\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    best_extension = None\n    best_strength = None\n    for ext in extensions:\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        if best_extension is None or strength > best_strength:\n            best_extension = ext\n            best_strength = strength\n    return class_name + '.' + best_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = abs(num)\n    if num == 0:\n        return (1, 0)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000 inclusive\")\n    vals = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]\n    result = ''\n    for val, sym in vals:\n        while number >= val:\n            result += sym\n            number -= val\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = sorted([a, b, c])\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    best = None\n    max_unique = -1\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique:\n            max_unique = unique_count\n            best = word\n        elif unique_count == max_unique:\n            if word < best:\n                best = word\n    return best"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    allowed_ops = {'+', '-', '*', '//', '**'}\n    for op in operator:\n        if op not in allowed_ops:\n            raise ValueError('Invalid operator')\n    expr = str(operand[0])\n    for i, op in enumerate(operator):\n        expr += ' ' + op + ' ' + str(operand[i+1])\n    return eval(expr)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    return [x for x in [2, 4, 6, 8] if low <= x <= high]"}
